# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Finite categories from nerve data

####################################
#
#! @Section GAP categories
#
####################################

#! @Description
#!  The &GAP; category of categories from nerve data.
DeclareCategory( "IsCategoryFromNerveData",
        IsCapCategory );

#! @Description
#!  The &GAP; category of cells in a category from nerve data.
DeclareCategory( "IsCellInCategoryFromNerveData",
        IsCapCategoryCell );

#! @Description
#!  The &GAP; category of objects in a category from nerve data.
DeclareCategory( "IsObjectInCategoryFromNerveData",
        IsCellInCategoryFromNerveData and IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms in a category from nerve data.
DeclareCategory( "IsMorphismInCategoryFromNerveData",
        IsCellInCategoryFromNerveData and IsCapCategoryMorphism );

####################################
#
#! @Section Attributes
#
####################################

#! @Description
#!  The data tables of the category <A>C</A> create from nerve data.
#! @Arguments C
#! @Returns a pair of lists
DeclareAttribute( "DataTablesOfCategory",
        IsCategoryFromNerveData );

#! @Description
#!  The finite set of objects of the category <A>C</A> created from nerve data.
#! @Arguments C
#! @Returns a list
DeclareAttribute( "SetOfObjects",
        IsCategoryFromNerveData );

CapJitAddTypeSignature( "SetOfObjects", [ IsCategoryFromNerveData ],
  function ( input_types )
    
    return rec( filter := IsList,
                element_type := CapJitDataTypeOfObjectOfCategory( input_types[1].category ) );
    
end );

DeclareAttribute( "IndicesOfGeneratingMorphisms",
        IsCategoryFromNerveData );

CapJitAddTypeSignature( "IndicesOfGeneratingMorphisms", [ IsCategoryFromNerveData ],
  function ( input_types )
    
    return rec( filter := IsList,
                element_type := rec( filter := IsInt ) );
    
end );

#! @Description
#!  The finite set of morphisms generating the category <A>C</A> created from nerve data.
#! @Arguments C
#! @Returns a list
DeclareAttribute( "SetOfGeneratingMorphisms",
        IsCategoryFromNerveData );

CapJitAddTypeSignature( "SetOfGeneratingMorphisms", [ IsCategoryFromNerveData ],
  function ( input_types )
    
    return rec( filter := IsList,
                element_type := CapJitDataTypeOfMorphismOfCategory( input_types[1].category ) );
    
end );

##
DeclareAttribute( "MapOfObject",
        IsObjectInCategoryFromNerveData );

CapJitAddTypeSignature( "MapOfObject", [ IsObjectInCategoryFromNerveData ],
  function ( input_types )
    local V;
    
    Assert( 0, IsCategoryFromNerveData( input_types[1].category ) );
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return CapJitDataTypeOfMorphismOfCategory( V );
    
end );

##
DeclareAttribute( "MapOfMorphism",
        IsMorphismInCategoryFromNerveData );

CapJitAddTypeSignature( "MapOfMorphism", [ IsMorphismInCategoryFromNerveData ],
  function ( input_types )
    local V;
    
    Assert( 0, IsCategoryFromNerveData( input_types[1].category ) );
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return CapJitDataTypeOfMorphismOfCategory( V );
    
end );

####################################
#
#! @Section Constructors
#
####################################

#! @Description
#!  Construct a category with name <A>str</A> from the given <A>nerve_data</A>.
#! @Arguments str, nerve_data, indices_of_generating_morphisms, labels
#! @Returns a &CAP; category
DeclareOperation( "CategoryFromNerveData",
        [ IsString, IsList, IsList, IsList ] );
#! @InsertChunk CategoryFromNerveData

#! @Description
#!  Construct the <A>o</A>-th object in the category <A>C</A> created from nerve data.
#! @Arguments C, o
#! @Returns a &CAP; category
DeclareOperation( "CreateObject",
        [ IsCategoryFromNerveData, IsInt ] );

#! @Description
#!  Construct the <A>m</A>-th morphism <A>source</A>$\to$<A>range</A>
#!  in the category <A>C</A> created from nerve data.
#! @Arguments C, m
#! @Returns a &CAP; category
#! @Group CreateMorphism
DeclareOperation( "CreateMorphism",
        [ IsCategoryFromNerveData, IsInt ] );

#! @Arguments source, m, range
#! @Group CreateMorphism
DeclareOperation( "CreateMorphism",
        [ IsObjectInCategoryFromNerveData, IsInt, IsObjectInCategoryFromNerveData ] );
