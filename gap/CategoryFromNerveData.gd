# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Finitely presented categories generated by enhanced quivers

####################################
#
#! @Section GAP categories
#
####################################

#! @Description
#!  The &GAP; category of categories from nerve data.
DeclareCategory( "IsCategoryFromNerveData",
        IsCapCategory );

#! @Description
#!  The &GAP; category of cells in a category from nerve data.
DeclareCategory( "IsCellInCategoryFromNerveData",
        IsCapCategoryCell );

#! @Description
#!  The &GAP; category of objects in a category from nerve data.
DeclareCategory( "IsObjectInCategoryFromNerveData",
        IsCellInCategoryFromNerveData and IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms in a category from nerve data.
DeclareCategory( "IsMorphismInCategoryFromNerveData",
        IsCellInCategoryFromNerveData and IsCapCategoryMorphism );

####################################
#
#! @Section Attributes
#
####################################

#! @Description
#!  The nerve data used to create the category <A>C</A>.
#! @Arguments C
#! @Returns a pair of lists
DeclareAttribute( "NerveData",
        IsCategoryFromNerveData );

CapJitAddTypeSignature( "NerveData", [ IsCategoryFromNerveData ],
  function ( input_types )
    local V;
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return rec( filter := IsNTuple,
                element_types :=
                [ rec( filter := IsNTuple,
                       element_types :=
                       [ CapJitDataTypeOfObjectOfCategory( V ),      # C0
                         CapJitDataTypeOfObjectOfCategory( V ),      # C1
                         CapJitDataTypeOfObjectOfCategory( V ) ] ),  # C2
                  rec( filter := IsNTuple,
                       element_types :=
                       [ CapJitDataTypeOfMorphismOfCategory( V ),    # id
                         CapJitDataTypeOfMorphismOfCategory( V ),    # s
                         CapJitDataTypeOfMorphismOfCategory( V ),    # t
                         CapJitDataTypeOfMorphismOfCategory( V ),    # is
                         CapJitDataTypeOfMorphismOfCategory( V ),    # it
                         CapJitDataTypeOfMorphismOfCategory( V ),    # ps
                         CapJitDataTypeOfMorphismOfCategory( V ),    # pt
                         CapJitDataTypeOfMorphismOfCategory( V ) ] ) # mu
                  ] );
    
end );

##
DeclareAttribute( "MapOfObject",
        IsObjectInCategoryFromNerveData );

CapJitAddTypeSignature( "MapOfObject", [ IsObjectInCategoryFromNerveData ],
  function ( input_types )
    local V;
    
    Assert( 0, IsCategoryFromNerveData( input_types[1].category ) );
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return CapJitDataTypeOfMorphismOfCategory( V );
    
end );

##
DeclareAttribute( "MapOfMorphism",
        IsMorphismInCategoryFromNerveData );

CapJitAddTypeSignature( "MapOfMorphism", [ IsMorphismInCategoryFromNerveData ],
  function ( input_types )
    local V;
    
    Assert( 0, IsCategoryFromNerveData( input_types[1].category ) );
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return CapJitDataTypeOfMorphismOfCategory( V );
    
end );

####################################
#
#! @Section Constructors
#
####################################

#! @Description
#!  Construct a category with name <A>str</A> from the given <A>nerve_data</A>.
#! @Arguments str, nerve_data
#! @Returns a &CAP; category
DeclareOperation( "CategoryFromNerveData",
        [ IsStringRep, IsList ] );
#! @InsertChunk CategoryFromNerveData

#! @Description
#!  Construct the <A>o</A>-th object in the category <A>C</A> created from nerve data.
#! @Arguments C, o
#! @Returns a &CAP; category
DeclareOperation( "CreateObject",
        [ IsCategoryFromNerveData, IsInt ] );

#! @Description
#!  Construct the <A>m</A>-th morphism <A>source</A>$\to$<A>range</A>
#!  in the category <A>C</A> created from nerve data.
#! @Arguments C, m
#! @Returns a &CAP; category
#! @Group CreateMorphism
DeclareOperation( "CreateMorphism",
        [ IsCategoryFromNerveData, IsInt ] );

#! @Arguments source, m, range
#! @Group CreateMorphism
DeclareOperation( "CreateMorphism",
        [ IsObjectInCategoryFromNerveData, IsInt, IsObjectInCategoryFromNerveData ] );
