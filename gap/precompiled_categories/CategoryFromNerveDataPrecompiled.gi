# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Implementations
#
BindGlobal( "ADD_FUNCTIONS_FOR_CategoryFromNerveDataPrecompiled", function ( cat )
    
    ##
    AddIdentityMorphism( cat,
        
########
function ( cat_1, a_1 )
    local hoisted_1_1, hoisted_2_1, deduped_3_1, deduped_4_1, deduped_5_1;
    deduped_5_1 := MapOfObject( a_1 );
    deduped_4_1 := Source( deduped_5_1 );
    deduped_3_1 := NerveData( cat_1 )[2][1];
    hoisted_2_1 := AsList( deduped_3_1 );
    hoisted_1_1 := AsList( deduped_5_1 );
    return CreateCapCategoryMorphismWithAttributes( cat_1, a_1, a_1, MapOfMorphism, CreateCapCategoryMorphismWithAttributes( RangeCategoryOfHomomorphismStructure( cat_1 ), deduped_4_1, Range( deduped_3_1 ), AsList, List( [ 0 .. Length( deduped_4_1 ) - 1 ], function ( i_2 )
                return hoisted_2_1[1 + hoisted_1_1[(1 + i_2)]];
            end ) ) );
end
########
        
    , 100 );
    
    ##
    AddIsCongruentForMorphisms( cat,
        
########
function ( cat_1, arg2_1, arg3_1 )
    return AsList( MapOfMorphism( arg2_1 ) ) = AsList( MapOfMorphism( arg3_1 ) );
end
########
        
    , 100 );
    
    ##
    AddIsEqualForMorphisms( cat,
        
########
function ( cat_1, arg2_1, arg3_1 )
    return AsList( MapOfMorphism( arg2_1 ) ) = AsList( MapOfMorphism( arg3_1 ) );
end
########
        
    , 100 );
    
    ##
    AddIsEqualForObjects( cat,
        
########
function ( cat_1, arg2_1, arg3_1 )
    return AsList( MapOfObject( arg2_1 ) ) = AsList( MapOfObject( arg3_1 ) );
end
########
        
    , 100 );
    
    ##
    AddIsWellDefinedForMorphisms( cat,
        
########
function ( cat_1, arg2_1 )
    local hoisted_1_1, deduped_2_1, deduped_3_1, deduped_4_1, deduped_5_1;
    deduped_5_1 := MapOfMorphism( arg2_1 );
    deduped_4_1 := AsList( deduped_5_1 );
    deduped_3_1 := Length( Range( deduped_5_1 ) );
    deduped_2_1 := Length( Source( deduped_5_1 ) );
    hoisted_1_1 := deduped_3_1;
    return IdFunc( function (  )
                  if not ForAll( deduped_4_1, function ( a_3 )
                               return (IsInt( a_3 ) and a_3 >= 0);
                           end ) then
                      return false;
                  elif deduped_2_1 <> Length( deduped_4_1 ) then
                      return false;
                  elif not ForAll( deduped_4_1, function ( a_3 )
                               return a_3 < hoisted_1_1;
                           end ) then
                      return false;
                  else
                      return true;
                  fi;
                  return;
              end )(  ) and deduped_2_1 = 1 and Length( NerveData( cat_1 )[1][2] ) = deduped_3_1;
end
########
        
    , 100 );
    
    ##
    AddIsWellDefinedForObjects( cat,
        
########
function ( cat_1, arg2_1 )
    local hoisted_1_1, deduped_2_1, deduped_3_1, deduped_4_1, deduped_5_1;
    deduped_5_1 := MapOfObject( arg2_1 );
    deduped_4_1 := AsList( deduped_5_1 );
    deduped_3_1 := Length( Range( deduped_5_1 ) );
    deduped_2_1 := Length( Source( deduped_5_1 ) );
    hoisted_1_1 := deduped_3_1;
    return IdFunc( function (  )
                  if not ForAll( deduped_4_1, function ( a_3 )
                               return (IsInt( a_3 ) and a_3 >= 0);
                           end ) then
                      return false;
                  elif deduped_2_1 <> Length( deduped_4_1 ) then
                      return false;
                  elif not ForAll( deduped_4_1, function ( a_3 )
                               return a_3 < hoisted_1_1;
                           end ) then
                      return false;
                  else
                      return true;
                  fi;
                  return;
              end )(  ) and deduped_2_1 = 1 and Length( NerveData( cat_1 )[1][1] ) = deduped_3_1;
end
########
        
    , 100 );
    
    ##
    AddMorphismConstructor( cat,
        
########
function ( cat_1, arg2_1, arg3_1, arg4_1 )
    return CreateCapCategoryMorphismWithAttributes( cat_1, arg2_1, arg4_1, MapOfMorphism, arg3_1 );
end
########
        
    , 100 );
    
    ##
    AddMorphismDatum( cat,
        
########
function ( cat_1, arg2_1 )
    return MapOfMorphism( arg2_1 );
end
########
        
    , 100 );
    
    ##
    AddObjectConstructor( cat,
        
########
function ( cat_1, arg2_1 )
    return CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, arg2_1 );
end
########
        
    , 100 );
    
    ##
    AddObjectDatum( cat,
        
########
function ( cat_1, arg2_1 )
    return MapOfObject( arg2_1 );
end
########
        
    , 100 );
    
    ##
    AddPreCompose( cat,
        
########
function ( cat_1, alpha_1, beta_1 )
    local hoisted_3_1, hoisted_4_1, hoisted_5_1, hoisted_6_1, hoisted_7_1, hoisted_8_1, hoisted_9_1, hoisted_10_1, deduped_11_1, deduped_12_1, deduped_13_1, deduped_14_1, deduped_15_1, deduped_16_1, deduped_17_1, deduped_18_1, deduped_19_1, deduped_20_1;
    deduped_20_1 := NerveData( cat_1 );
    deduped_19_1 := RangeCategoryOfHomomorphismStructure( cat_1 );
    deduped_18_1 := deduped_20_1[2];
    deduped_17_1 := deduped_18_1[2];
    deduped_16_1 := deduped_18_1[3];
    deduped_15_1 := deduped_18_1[8];
    deduped_14_1 := Length( Source( deduped_17_1 ) );
    deduped_13_1 := Length( Source( deduped_16_1 ) );
    deduped_12_1 := [ 0 .. Length( deduped_20_1[1][3] ) - 1 ];
    hoisted_6_1 := AsList( deduped_17_1 );
    hoisted_5_1 := deduped_14_1;
    hoisted_4_1 := AsList( deduped_16_1 );
    hoisted_3_1 := deduped_13_1;
    deduped_11_1 := Filtered( [ 0 .. deduped_13_1 * deduped_14_1 - 1 ], function ( x_2 )
            return hoisted_4_1[1 + REM_INT( x_2, hoisted_3_1 )] = hoisted_6_1[1 + REM_INT( QUO_INT( x_2, hoisted_3_1 ), hoisted_5_1 )];
        end );
    hoisted_10_1 := deduped_11_1;
    hoisted_9_1 := AsList( deduped_18_1[7] );
    hoisted_8_1 := AsList( deduped_18_1[6] );
    hoisted_7_1 := deduped_12_1;
    return CreateCapCategoryMorphismWithAttributes( cat_1, Source( alpha_1 ), Range( beta_1 ), MapOfMorphism, CreateCapCategoryMorphismWithAttributes( deduped_19_1, CreateCapCategoryObjectWithAttributes( deduped_19_1, Length, 1 ), Range( deduped_15_1 ), AsList, [ AsList( deduped_15_1 )[1 + (-1 + SafePosition( List( deduped_12_1, function ( logic_new_func_x_2 )
                           local deduped_1_2;
                           deduped_1_2 := (1 + CAP_JIT_INCOMPLETE_LOGIC( hoisted_7_1[(1 + logic_new_func_x_2)] ));
                           return (-1 + SafePosition( hoisted_10_1, (hoisted_8_1[deduped_1_2] + hoisted_9_1[deduped_1_2] * hoisted_3_1) ));
                       end ), CAP_JIT_INCOMPLETE_LOGIC( [ 0 .. (Length( deduped_11_1 ) - 1) ][SafePosition( deduped_11_1, (AsList( MapOfMorphism( alpha_1 ) )[1] + AsList( MapOfMorphism( beta_1 ) )[1] * deduped_13_1) )] ) ))] ] ) );
end
########
        
    , 100 );
    
    if IsBound( cat!.precompiled_functions_added ) then
        
        # COVERAGE_IGNORE_NEXT_LINE
        Error( "precompiled functions have already been added before" );
        
    fi;
    
    cat!.precompiled_functions_added := true;
    
end );

BindGlobal( "CategoryFromNerveDataPrecompiled", function ( quiver )
  local category_constructor, cat;
    
    category_constructor :=
        
        
        function ( quiver )
    local sFinSets;
    sFinSets := CategoryOfSkeletalFinSets(  : FinalizeCategory := true );
    return CategoryFromNerveData( "CategoryFromNerveData", NerveTruncatedInDegree2Data( FreeCategory( quiver : range_of_HomStructure := sFinSets,
            FinalizeCategory := true ) ) );
end;
        
        
    
    cat := category_constructor( quiver : FinalizeCategory := false, no_precompiled_code := true );
    
    ADD_FUNCTIONS_FOR_CategoryFromNerveDataPrecompiled( cat );
    
    Finalize( cat );
    
    return cat;
    
end );
