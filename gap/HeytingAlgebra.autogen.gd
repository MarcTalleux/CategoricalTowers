# SPDX-License-Identifier: GPL-2.0-or-later
# Locales: Locales, frames, coframes, meet semi-lattices of locally closed subsets, and Boolean algebras of constructible sets
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Heyting algebras

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismToDoubleNegationWithGivenDoubleNegation`.
#! $F: ( a, r ) \mapsto \mathtt{MorphismToDoubleNegationWithGivenDoubleNegation}(a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismToDoubleNegationWithGivenDoubleNegation",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismToDoubleNegationWithGivenDoubleNegation",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismToDoubleNegationWithGivenDoubleNegation",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismToDoubleNegationWithGivenDoubleNegation",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `NegationOnMorphismsWithGivenNegations`.
#! $F: ( s, alpha, r ) \mapsto \mathtt{NegationOnMorphismsWithGivenNegations}(s, alpha, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddNegationOnMorphismsWithGivenNegations",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddNegationOnMorphismsWithGivenNegations",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddNegationOnMorphismsWithGivenNegations",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddNegationOnMorphismsWithGivenNegations",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `NegationOnObjects`.
#! $F: ( a ) \mapsto \mathtt{NegationOnObjects}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddNegationOnObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddNegationOnObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddNegationOnObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddNegationOnObjects",
                  [ IsCapCategory, IsList ] );
