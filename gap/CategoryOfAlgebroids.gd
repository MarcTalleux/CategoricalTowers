# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Category of algebroids

####################################
#
#! @Section GAP categories
#
####################################

#! @Description
#! The GAP category of objects in the category
#! of algebroids over a ring $R$.
#! @Arguments object
DeclareCategory( "IsCategoryOfAlgebroidsObject",
                 IsCapCategoryObject );

#! @Description
#! The GAP category of morphisms in the category
#! of algebroids over a ring $R$.
#! @Arguments object
DeclareCategory( "IsCategoryOfAlgebroidsMorphism",
                 IsCapCategoryMorphism );

#! @Description
#!  The &GAP; category of morphisms of algebroids.
DeclareCategory( "IsAlgebroidMorphism",
        IsCapFunctor );

DeclareCategory( "IsCategoryOfAlgebroids",
                 IsCapCategory );

####################################
#
#! @Section Properties
#
####################################

#! @Description
#!  Check whether the algebroid <A>A</A> is commutative.
#! @Arguments A
#! @Returns true or false
DeclareProperty( "IsCommutative",
        IsCategoryOfAlgebroidsObject );

#! @Description
#!  Check whether <A>B</A> is counitary.
#! @Arguments B
#! @Returns true or false
DeclareProperty( "IsCounitary",
        IsCategoryOfAlgebroidsObject );

#! @Description
#!  Check whether <A>B</A> is coassociative.
#! @Arguments B
#! @Returns true or false
DeclareProperty( "IsCoassociative",
        IsCategoryOfAlgebroidsObject );

####################################
#
#! @Section Attributes
#
####################################

#!
DeclareAttribute( "AsCapCategory",
        IsCategoryOfAlgebroidsObject );

#!
DeclareAttribute( "AsCapFunctor",
        IsCategoryOfAlgebroidsMorphism );

####################################
#
#! @Section Constructors
#
####################################

DeclareGlobalFunction( "INSTALL_FUNCTIONS_FOR_CATEGORY_OF_ALGEBROIDS" );

#!
DeclareOperation( "CategoryOfAlgebroids",
                  [ IsHomalgRing, IsString ] );

#!
DeclareAttribute( "CategoryOfAlgebroidsObject",
                  IsAlgebroid );

#!
DeclareOperation( "CategoryOfAlgebroidsMorphism",
                  [ IsCategoryOfAlgebroidsObject, IsAlgebroidMorphism, IsCategoryOfAlgebroidsObject ] );

#!
DeclareOperation( "CategoryOfAlgebroidsMorphism",
                  [ IsAlgebroidMorphism ] );

####################################
#
#! @Section Operations
#
####################################

DeclareOperation( "TensorProductOnObjects",
        [ IsAlgebroid, IsAlgebroid ] );

DeclareOperation( "LeftUnitorInverseAsFunctor",
        [ IsAlgebroid ] );

DeclareOperation( "LeftUnitorAsFunctor",
        [ IsAlgebroid ] );

DeclareOperation( "RightUnitorInverseAsFunctor",
        [ IsAlgebroid ] );

DeclareOperation( "RightUnitorAsFunctor",
        [ IsAlgebroid ] );

DeclareOperation( "AssociatorLeftToRightWithGivenTensorProductsAsFunctor",
        [ IsAlgebroid, IsAlgebroid, IsAlgebroid, IsAlgebroid, IsAlgebroid ] );

DeclareOperation( "AssociatorRightToLeftWithGivenTensorProductsAsFunctor",
        [ IsAlgebroid, IsAlgebroid, IsAlgebroid, IsAlgebroid, IsAlgebroid ] );

#! @Description
#!  Construct the canonical twist from <A>A</A> $\otimes$ <A>B</A> to <A>B</A> $\otimes$ <A>A</A>
#! @Arguments A, B
#! @Returns a &CAP; functor
DeclareOperation( "Twist",
        [ IsAlgebroid, IsAlgebroid ] );

