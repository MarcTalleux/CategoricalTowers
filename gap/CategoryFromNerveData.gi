# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Implementations
#

##
InstallMethod( CategoryFromNerveData,
        "for a string and a list",
        [ IsStringRep, IsList ],
        
  function( name, nerve_data )
    local C, V;
    
    C := CreateCapCategory( name,
                 IsCategoryFromNerveData,
                 IsObjectInCategoryFromNerveData,
                 IsMorphismInCategoryFromNerveData,
                 IsCapCategoryTwoCell );
    
    V := CapCategory( nerve_data[1][1] );
    
    SetRangeCategoryOfHomomorphismStructure( C, V );
    SetNerveData( C, nerve_data );
    
    C!.category_as_first_argument := true;
    
    C!.compiler_hints :=
      rec( category_filter := IsCategoryFromNerveData,
           object_filter := IsObjectInCategoryFromNerveData and HasMapOfObject,
           morphism_filter := IsMorphismInCategoryFromNerveData and HasMapOfMorphism,
           category_attribute_names :=
           [ "NerveData",
             ] );
    
    ##
    AddObjectConstructor( C,
      function( C, obj_map )
        
        return CreateCapCategoryObjectWithAttributes( C,
                       MapOfObject, obj_map );
        
    end );
    
    ##
    AddObjectDatum( C,
      function( C, obj )
        
        return MapOfObject( obj );
        
    end );
    
    ##
    AddMorphismConstructor( C,
      function( C, source, mor_map, range )
        
        return CreateCapCategoryMorphismWithAttributes( C,
                       source,
                       range,
                       MapOfMorphism, mor_map );
        
    end );
    
    ##
    AddMorphismDatum( C,
      function( C, mor )
        
        return MapOfMorphism( mor );
        
    end );
    
    ##
    AddIsWellDefinedForObjects( C,
      function( C, obj )
        local V;
        
        V := RangeCategoryOfHomomorphismStructure( C );
        
        return IsWellDefinedForMorphisms( V, ObjectDatum( C, obj ) );
        
    end );
    
    ##
    AddIsWellDefinedForMorphisms( C,
      function( C, mor )
        local V;
        
        V := RangeCategoryOfHomomorphismStructure( C );
        
        return IsWellDefinedForMorphisms( V, MorphismDatum( C, mor ) );
        
    end );
    
    ##
    AddIsEqualForObjects( C,
      function( C, obj_1, obj_2 )
        local V;
        
        V := RangeCategoryOfHomomorphismStructure( C );
        
        return IsCongruentForMorphisms( V, ObjectDatum( C, obj_1 ), ObjectDatum( C, obj_2 ) );
        
    end );
    
    ##
    AddIsEqualForMorphisms( C,
      function( C, mor_1, mor_2 )
        local V;
        
        V := RangeCategoryOfHomomorphismStructure( C );
        
        return IsEqualForMorphisms( V, MorphismDatum( C, mor_1 ), MorphismDatum( C, mor_2 ) );
        
    end );
    
    ##
    AddIsCongruentForMorphisms( C,
      function( C, mor_1, mor_2 )
        local V;
        
        V := RangeCategoryOfHomomorphismStructure( C );
        
        return IsCongruentForMorphisms( V, MorphismDatum( C, mor_1 ), MorphismDatum( C, mor_2 ) );
        
    end );
    
    ##
    AddIdentityMorphism( C,
      function( C, obj )
        local V, id;
        
        V := RangeCategoryOfHomomorphismStructure( C );
        
        id := NerveData( C )[2][1];
        
        return MorphismConstructor( C,
                       obj,
                       PreCompose( V, ObjectDatum( C, obj ), id ),
                       obj );
        
    end );
    
    ##
    AddPreCompose( C,
      function( C, mor_1, mor_2 )
        local V, C2, s, t, ps, pt, mu, DC1xC1, C1xC1, C2_C1xC1, C1xC1_C2, mor_12;
        
        V := RangeCategoryOfHomomorphismStructure( C );
        
        ## C₂
        C2 := NerveData( C )[1][3];
        
        ## s: C₁ → C₀
        s := NerveData( C )[2][2];
        
        ## t: C₁ → C₀
        t := NerveData( C )[2][3];
        
        ## pₛ: C₂ → C₁
        ps := NerveData( C )[2][6];
        
        ## pₜ: C₂ → C₁
        pt := NerveData( C )[2][7];
        
        ## pₜ: C₂ → C₁
        mu := NerveData( C )[2][8];
        
        DC1xC1 := [ t, s ];
        
        ## C₁ ×ₜₛ C₁
        C1xC1 := FiberProduct( V,
                         DC1xC1 );
        
        ## C₂ → C₁ ×ₜₛ C₁
        C2_C1xC1 := UniversalMorphismIntoFiberProductWithGivenFiberProduct( V,
                            DC1xC1,
                            C2,
                            [ ps, pt ],
                            C1xC1 );
        
        #% CAP_JIT_DROP_NEXT_STATEMENT
        Assert( 0, IsIsomorphism( V, C2_C1xC1 ) ); # the first condition for the simplicial set to be the nerve of a category
        
        ## C₁ ×ₜₛ C₁ → C₂
        C1xC1_C2 := InverseForMorphisms( V,
                            C2_C1xC1 );
        
        ## 1 → C₁ ×ₜₛ C₁ → C₂
        mor_12 := PreCompose( V,
                          UniversalMorphismIntoFiberProductWithGivenFiberProduct( V,
                                  DC1xC1,
                                  TerminalObject( V ),
                                  [ MorphismDatum( C, mor_1 ), MorphismDatum( C, mor_2 ) ],
                                  C1xC1 ),
                          C1xC1_C2 );
        
        return MorphismConstructor( C,
                       Source( mor_1 ),
                       PreCompose( V, mor_12, mu ),
                       Range( mor_2 ) );
        
    end );
    
    #if false then
    if ValueOption( "no_precompiled_code" ) <> true then
        
        ADD_FUNCTIONS_FOR_CategoryFromNerveDataPrecompiled( C );
        
    fi;
    
    Finalize( C );
    
    return C;
    
end );

##
InstallMethod( CreateObject,
        "for a category from nerve data and an integer",
        [ IsCategoryFromNerveData, IsInt ],
        
  function( C, o )
    local V, objs, obj_map;
    
    V := RangeCategoryOfHomomorphismStructure( C );
    
    objs := NerveData( C )[1][1];
    
    obj_map := MorphismConstructor( V,
                       TerminalObject( V ),
                       [ o ],
                       objs );
    
    return ObjectConstructor( C, obj_map );
    
end );

##
InstallMethod( \/,
        "for an integer and a category from nerve data",
        [ IsInt, IsCategoryFromNerveData ],
        
  function( o, C )
    
    return CreateObject( C, o );
    
end );

##
InstallMethod( CreateMorphism,
        "for two objects in a category from nerve data and an integer",
        [ IsObjectInCategoryFromNerveData, IsInt, IsObjectInCategoryFromNerveData ],
        
  function( source, m, range )
    local C, V, mors, mor_map;
    
    C := CapCategory( source );
    
    V := RangeCategoryOfHomomorphismStructure( C );
    
    mors := NerveData( C )[1][2];
    
    mor_map := MorphismConstructor( V,
                       TerminalObject( V ),
                       [ m ],
                       mors );
    
    return MorphismConstructor( C,
                   source,
                   mor_map,
                   range );
    
end );

##
InstallMethod( CreateMorphism,
        "for a category from nerve data and an integer",
        [ IsCategoryFromNerveData, IsInt ],
        
  function( C, m )
    local nerve_data, s, t;
    
    nerve_data := NerveData( C );
    
    s := nerve_data[2][2];
    t := nerve_data[2][3];
    
    return CreateMorphism(
                   CreateObject( C, s( m ) ),
                   m,
                   CreateObject( C, t( m ) ) );
    
end );

####################################
#
# View, Print, and Display methods:
#
####################################

##
InstallMethod( ViewObj,
        "for an object in a category from nerve data",
        [ IsObjectInCategoryFromNerveData ],
        
  function( obj )
    
    Print( "(", String( MapOfObject( obj )( 0 ) ), ")" );
    
end );

##
InstallMethod( ViewObj,
        "for a morphism in a category from nerve data",
        [ IsMorphismInCategoryFromNerveData ],
        
  function( mor )
    
    ViewObj( Source( mor ) );
    Print( "-[" );
    ViewObj( MapOfMorphism( mor )( 0 ) );
    Print( "]->" );
    ViewObj( Range( mor ) );
    
end );

##
InstallMethod( LaTeXOutput,
        "for an object in a category from nerve data",
        [ IsObjectInCategoryFromNerveData ],
        
  function( obj )
    
    return String( MapOfObject( obj )( 0 ) );
    
end );

##
InstallMethod( LaTeXOutput,
        "for a morphism in a category from nerve data",
        [ IsMorphismInCategoryFromNerveData ],
        
  function( mor )
    local s;
    
    s := String( MapOfMorphism( mor )( 0 ) );
    
    if ValueOption( "OnlyDatum" ) = true then
        
        return s;
        
    fi;
    
    return Concatenation(
                   "{", LaTeXOutput( Source( mor ) ), "}",
                   "-\\left[{", s, "}\\right]\\rightarrow",
                   "{", LaTeXOutput( Range( mor ) ), "}" );
    
end );
