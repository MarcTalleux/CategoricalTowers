# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Bialgebroids as algebroids with more structure

####################################
#
#! @Section GAP categories
#
####################################

#! @Description
#!  The &GAP; category of bialgebroids.
DeclareCategory( "IsBialgebroid",
        IsAlgebroid );

####################################
#
#! @Section Properties
#
####################################

#! @Description
#!  Check whether the bialgebroid <A>B</A> is cocommutative.
#! @Arguments B
#! @Returns true or false
DeclareProperty( "IsCocommutative",
        IsBialgebroid );

#! @Description
#!  Check whether the antipode of <A>B</A> is actually an antipode.
#! @Arguments B
#! @Returns true or false
DeclareProperty( "IsHopfAlgebroid",
        IsBialgebroid );

#! @Description
#!  The property of <A>C</A> being a linear closure of a category.
#! @Arguments C
AddCategoricalProperty( [ "IsLinearClosureOfACategory" ] );

####################################
#
#! @Section Attributes
#
####################################

#! @Description
#!  The counit of the bialgebroid <A>B</A>.
#! @Arguments B
#! @Returns a &CAP; functor
DeclareAttribute( "Counit",
        IsAlgebroid );

#! @Description
#!  The comultiplication of the bialgebroid <A>B</A>.
#! @Arguments B
#! @Returns a &CAP; functor
DeclareAttribute( "Comultiplication",
        IsAlgebroid );

####################################
#
#! @Section Constructors
#
####################################

#! @Description
#!  Add to the algebroid <A>A</A> a counit and a comultiplication
#!  using the defining records <A>counit</A> and <A>comult</A>, respectively.
#! @Arguments A, counit, comult
#! @Returns a &CAP; category
DeclareOperation( "AddBialgebroidStructure",
        [ IsAlgebroid, IsRecord, IsRecord ] );

#! @Description
#!  Add to the bialgebroid <A>B</A> an antipode <A>S</A>.
#! @Arguments B, S
#! @Returns a &CAP; category
DeclareOperation( "AddAntipode",
        [ IsAlgebroid, IsRecord ] );
