# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Tools

#! @Section Tools for quivers

#! @Description
#!  Return a pair consisting of the number of vertices of the quiver <A>q</A>
#!  and a list of pairs of integers encoding the arrows of <A>q</A>.
#! @Arguments q
#! @Returns a pair
DeclareAttribute( "DefiningPairOfAQuiver",
        IsQuiver );
#! @InsertChunk DefiningPairOfAQuiver

#! @Description
#!  The defining pair of the quiver underlying the finitely presented category <A>C</A>.
#! @Arguments C
#! @Returns a pair
DeclareAttribute( "DefiningPairOfUnderlyingQuiver",
        IsCapCategory );

CapJitAddTypeSignature( "DefiningPairOfUnderlyingQuiver", [ IsCapCategory ],
  function ( input_types )
    
    return rec( filter := IsNTuple,
                element_types :=
                [ rec( filter := IsInt ),
                  rec( filter := IsList,
                       element_type :=
                       rec( filter := IsNTuple,
                            element_types :=
                            [ rec( filter := IsInt ),
                              rec( filter := IsInt ) ] ) ) ] );
    
end );

#! @Section Tools for categories

#! @Description
#!  The nerve data of the category <A>C</A>.
#! @Arguments C
#! @Returns a pair consisting of a triple and an 8-tuple
DeclareAttribute( "NerveTruncatedInDegree2Data",
        IsCapCategory );

#! @Description
#!  The data tables of the category <A>C</A>.
#! @Arguments C
#! @Returns a pair of lists
DeclareAttribute( "DataTablesOfCategory",
        IsCapCategory );

#! @Description
#!  The opposite category of a finite category <A>C</A>.
#! @Arguments C
#! @Returns a &CAP; category
DeclareAttribute( "OppositeFiniteCategory",
        IsCapCategory );
