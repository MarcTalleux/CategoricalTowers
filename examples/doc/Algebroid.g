#! @System Algebroid

LoadPackage( "Bialgebroid" );
LoadPackage( "MatricesForHomalg" );

#! @Example
ql := LeftQuiver( "ql(u,v,w)[a:u->v,b:v->u,c:v->u,d:v->w]" );
#! ql(u,v,w)[a:u->v,b:v->u,c:v->u,d:v->w]
qr := RightQuiver( "qr(u,v,w)[a:u->v,b:v->u,c:v->u,d:v->w]" );
#! qr(u,v,w)[a:u->v,b:v->u,c:v->u,d:v->w]
LoadPackage( "MatricesForHomalg" );
#! true
Q := HomalgFieldOfRationals( );
#! Q
Al := Algebroid( Q, ql );
#! Algebroid generated by the left quiver ql(u,v,w)[a:u->v,b:v->u,c:v->u,d:v->w]
Ar := Algebroid( Q, qr );
#! Algebroid generated by the right quiver qr(u,v,w)[a:u->v,b:v->u,c:v->u,d:v->w]
Al.u;
#! (u)
Ar.u;
#! (u)
Al.a;
#! (v)<-[1*(a)]-(u)
Ar.a;
#! (u)-[1*(a)]->(v)
PreCompose( Al.a, Al.d );
#! (w)<-[1*(d*a)]-(u)
PreCompose( Ar.a, Ar.d );
#! (u)-[1*(a*d)]->(w)
Al.b+Al.c;
#! (u)<-[1*(c) + 1*(b)]-(v)
Ar.b+Ar.c;
#! (v)-[1*(c) + 1*(b)]->(u)
Al.b-Al.c;
#! (u)<-[-1*(c) + 1*(b)]-(v)
Ar.b-Ar.c;
#! (v)-[-1*(c) + 1*(b)]->(u)
Al.d - Al.d;
#! (w)<-[0]-(v)
Ar.d - Ar.d;
#! (v)-[0]->(w)
#! @EndExample
