#! @System Bialgebroid

LoadPackage( "Bialgebroid" );
LoadPackage( "MatricesForHomalg" );

#! @Example
q := RightQuiver( "q(u,v)[a:u->v,b:v->u]" );
#! q(u,v)[a:u->v,b:v->u]
LoadPackage( "MatricesForHomalg" );
#! true
Q := HomalgFieldOfRationals( );
#! Q
Qq := PathAlgebra( Q, q );
#! Q * q
Qqq := TensorProductOfAlgebras( Qq, Qq );
#! (Q * qxq) / [ 1*(au*va) - 1*(ua*av), 1*(av*vb) - 1*(ub*au),
#!               1*(bu*ua) - 1*(va*bv), 1*(bv*ub) - 1*(vb*bu) ]
counit := rec( a := 1, b := 1 );
#! rec( a := 1, b := 1 )
comult := rec( a := Qqq.au*Qqq.va, b := Qqq.bv*Qqq.ub );
#! rec( a := { 1*(ua*av) }, b := { 1*(vb*bu) } )
B := Bialgebroid( Qq, comult, counit );
#! Bialgebroid generated by the right quiver q(u,v)[a:u->v,b:v->u]
counit := Counit( B );
#! counit functor for the Bialgebroid generated
#! by the right quiver q(u,v)[a:u->v,b:v->u]
ApplyFunctor( counit, B.u );
#! (1)
ApplyFunctor( counit, B.v );
#! (1)
ApplyFunctor( counit, B.a );
#! (1)-[1*(1)]->(1)
ApplyFunctor( counit, B.b );
#! (1)-[1*(1)]->(1)
comult := Comultiplication( B );
#! comultiplication functor for the Bialgebroid generated
#! by the right quiver q(u,v)[a:u->v,b:v->u]
ApplyFunctor( comult, B.u );
#! (uu)
ApplyFunctor( comult, B.v );
#! (vv)
ApplyFunctor( comult, B.a );
#! (uu)-[{ 1*(ua*av) }]->(vv)
ApplyFunctor( comult, B.b );
#! (vv)-[{ 1*(vb*bu) }]->(uu)
#! @EndExample
